#include <stdio.h>
#include<iostream>

using namespace std;
int que[50];
int rear= 0;
int front = -1;
int sizeofque = 0;
int ten = 1;
bool visited(int n){
   bool found = false;
   for(int i = 0;i<sizeofque;i++){
      if(n==que[i]){
         found =true;
         break;
      }
   }
//   if(notfound == false){
//      front++;
//      que[front] = n;
//   }
   return found;

}

void addtoque(int n){
   que[++front] = n;
   sizeofque++;
}

int getque(){
   return que[rear++];
}

bool emptycheck(){
   if(rear==front)
      return true;
   else
      return false;
}

int answer[50];
int index = 0;
int a[50][50];

int main(){
   int i ,j ;
   int r, c;
   int nodes, edges;
   printf("Enter Number of edges and nodes : ");
   scanf("%d%d", &nodes, &edges);



   for(i=1;i<=nodes;i++){
      for(j=1;j<=nodes;j++){
         a[i][j] = 0;
      }
   }

   printf("Enter %d node and their corresponding adjacent node\n", edges);

   for(i=1;i<=edges;i++){
      scanf("%d%d", &r, &c);
      a[r][c]=1;
      a[c][r]=1;
   }

   for(i=1;i<=nodes;i++){
      for(j=1;j<=nodes;j++){
         printf(" %d ", a[i][j]);
      }
      printf("\n");
   }

   int start;

   scanf("%d", &start);
   addtoque(start);
   while(index != nodes+1){
      for(i=start;index != nodes+1;i=getque()){
            answer[index]=i;
            index++;
         for(j=1;j<=nodes;j++){
            if(a[i][j]==1){
               bool temp = false;
               temp= visited(j);
               if(temp==false){
                  addtoque(j);
            }

         }
      }
   }
   }

   for(i=1;i<=nodes;i++){
      printf("%d", answer[i]);
   }

   return 0;
}
