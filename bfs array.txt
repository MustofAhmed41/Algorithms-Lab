#include <bits/stdc++.h>

using namespace std;
stack <int>q;
//vector< vector <int> > input(100009);
//vector<int> isVisited(100009,0);
//vector<int> dist(100009,0);
long input[1009][10];
long isVisited[10009];
long dist[10009];

void inputGraph(long nodes, long edges)
{
    for(long i = 1; i<=edges; i++) // +1 to avoid a garbage value at the row end of the vectors
    {
        for(long j = 1; j<=edges; j++)
        {
            input[i][j]=0;
        }
    }


    long n1,n2;
    for(long i = 1; i<=edges; i++)
    {
        cin >> n1 >> n2;
        input[n1][n2] = 1;
        input[n2][n1] = 1;
    }
}

//void printGraph(int nodes)
//{
//    for(int i = 1; i <= nodes; i++)
//    {
//        for(int j = 1; j <= nodes; j++)
//        {
//            cout << input[i][j] << " ";
//        }
//        cout << endl;
//    }
//}



int main()
{
    int n;
    cin >> n;
//    for(int i = 1; i<=100009; i++) // +1 to avoid a garbage value at the row end of the vectors
//    {
//        for(int j = 1; j<=100009; j++)
//        {
//            input[i].push_back(0);
//        }
//    }
    for(int x= 0 ; x < n;x++){
    long nodes, edges;
    cin >> nodes >> edges;
    inputGraph(nodes,edges);
//    printGraph(nodes);
    q.push(1);
    isVisited[q.top()] = 1;
    dist[q.top()] = 0;
    //cout << endl;
    while(!q.empty())
    {
        int temp = q.top();
        q.pop();
//        cout << temp <<" ";
        for(long j=0; j<=nodes; j++)
        {
            if(input[temp][j]==1 && isVisited[j]==0)
            {
                isVisited[j] = 1;
         //       cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                dist[j] = dist[temp] + 1;
           //     cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                q.push(j);
            }
        }
    }
//    cout << endl;
//    cout << endl;
//    for(int i = 1;i <= nodes;i++)
//        cout << i << " ";
//
//    cout << endl;
//    for(int i = 1 ; i <= nodes;i++)
//        cout << dist[i] << " ";
    cout << dist[nodes] << endl;

    for(long p = 1;p<=nodes;p++){
        isVisited[p] = 0;
        dist[p] = 0;
    }

    }


    return 0;
}

/*
5
6
1
2
1
4
2
4
2
3
3
5
4
5


*/
