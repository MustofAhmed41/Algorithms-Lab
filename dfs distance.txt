#include <bits/stdc++.h>

using namespace std;
stack <int>s;
vector< vector <int> > input(1005);
vector<int> isVisited(1005,0);
int answer[5];
int index;
int dist[200];

void inputGraph(int nodes, int edges){
    for(int i = 1;i<=nodes+1 ;i++){  // +1 to avoid a garbage value at the row end of the vectors
        for(int j = 1;j<=nodes+1;j++){
            input[i][j] = 0;
        }
    }
    int n1,n2;
    for(int i = 1;i<=edges;i++){
        cin >> n1 >> n2;
        input[n1][n2] = 1;
        input[n2][n1] = 1;
    }
}

void printGraph(int nodes){
    for(int i = 1; i <= nodes; i++){
        for(int j = 1; j <= nodes; j++){
            cout << input[i][j] << " ";
        }
        cout << endl;
    }
}

void dfs(int source, int nodes, int edges){
    s.push(source);
    isVisited[s.top()] = 1;
    while(!s.empty()){
        int temp = s.top();
        s.pop();
        cout << temp << " ";
        answer[index++] =  temp;
        for(int j=1;j<=nodes;j++){
            //cout << input[temp][j] << " " << isVisited[temp] << endl;
            if(input[temp][j]==1 && isVisited[j]==0){
                s.push(j);
                dist[j] = dist[temp] + 1;
                isVisited[j] = 1;

            }
        }
    }
    cout << endl;
    for(int i = 1; i <=nodes;i++){
        cout << dist[i] << " ";
    }
    cout << endl;
    for(int i = 1; i <=nodes;i++){
        isVisited[i] = 0;
        dist[i] = 0;
        for(int j = 1; j <= nodes;j++){
            input[i][j] = 0;
        }
    }

}

int main(){
    int nodes, edges;
    cin >> nodes >> edges;
    for(int i = 1;i<=nodes+1 ;i++){  // +1 to avoid a garbage value at the row end of the vectors
        for(int j = 1;j<=nodes+1;j++){
            input[i].push_back(0);
        }
    }

    inputGraph(nodes,edges);
    dfs(1,nodes,edges);
    cin >> nodes >> edges;
    inputGraph(nodes,edges);
    dfs(5,nodes,edges);
    //printGraph(nodes);

    return 0;
}


/*
5
6
1
2
1
4
2
4
2
3
3
5
4
5
*/
