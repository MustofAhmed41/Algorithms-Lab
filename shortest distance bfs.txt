#include <bits/stdc++.h>

using namespace std;
queue <int>q;
vector< vector <int> > input(200);
vector<int> isVisited(200,0);
vector<int> dist(200,0);

void inputGraph(int nodes, int edges)
{
    for(int i = 1; i<=nodes+1 ; i++) // +1 to avoid a garbage value at the row end of the vectors
    {
        for(int j = 1; j<=nodes+1; j++)
        {
            input[i].push_back(0);
        }
    }
    int n1,n2;
    for(int i = 1; i<=edges; i++)
    {
        cin >> n1 >> n2;
        input[n1][n2] = 1;
        input[n2][n1] = 1;
    }
}

void printGraph(int nodes)
{
    for(int i = 1; i <= nodes; i++)
    {
        for(int j = 1; j <= nodes; j++)
        {
            cout << input[i][j] << " ";
        }
        cout << endl;
    }
}



int main()
{
    int nodes, edges;
    cin >> nodes >> edges;
    inputGraph(nodes,edges);
    printGraph(nodes);
    int x = 0;
    q.push(1);
    isVisited[q.front()] = 1;
    dist[q.front()] = 0;
    while(!q.empty())
    {
        int temp = q.front();
        q.pop();
        cout << temp <<" ";
        for(int j=1; j<=nodes; j++)
        {
            if(input[temp][j]==1 && isVisited[j]==0)
            {
                isVisited[j] = 1;
         //       cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                dist[j] = dist[temp] + 1;
           //     cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                q.push(j);
            }
        }
    }
    cout << endl;
    for(int i = 1;i <= nodes;i++)
        cout << i << " ";

    cout << endl;
    for(int i = 1 ; i <= nodes;i++)
        cout << dist[i] << " ";

    return 0;
}




//////////////////////////////////



#include <bits/stdc++.h>

using namespace std;
queue <int>q;
vector< vector <int> > input(200);
vector<int> isVisited(200,0);
vector<int> dist(200,0);

void inputGraph(int nodes, int edges)
{
    for(int i = 1; i<=nodes+1 ; i++) // +1 to avoid a garbage value at the row end of the vectors
    {
        for(int j = 1; j<=nodes+1; j++)
        {
            input[i].push_back(0);
        }
    }
    int n1,n2;
    for(int i = 1; i<=edges; i++)
    {
        cin >> n1 >> n2;
        input[n1][n2] = 1;
        input[n2][n1] = 1;
    }
}

void printGraph(int nodes)
{
    for(int i = 1; i <= nodes; i++)
    {
        for(int j = 1; j <= nodes; j++)
        {
            cout << input[i][j] << " ";
        }
        cout << endl;
    }
}

void bfs(int source,int edges, int nodes, int a){
    q.push(source);
    isVisited[q.front()] = 1;
    dist[q.front()] = 0;
    while(!q.empty())
    {
        int temp = q.front();
        q.pop();
        cout << temp <<" ";
        for(int j=1; j<=nodes; j++)
        {
            if(input[temp][j]==1 && isVisited[j]==0)
            {
                isVisited[j] = 1;
         //       cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                dist[j] = dist[temp] + 1;
           //     cout << nxt << " " << dis[nxt] << " " << node <<" " << dis[node] << endl;
                q.push(j);
                if(a==j){
                    cout << " paisiii  :::" << dist[j] << endl;
                }
            }
        }
    }

    cout << endl;
    for(int i = 1; i <=nodes-1;i++){
        cout << dist[i] << " ";
    }
    cout << endl;
//    for(int i = 1; i <=nodes;i++){
//        isVisited[i] = 0;
//        dist[i] = 0;
//        for(int j = 1; j <= nodes;j++){
//            input[i][j] = 0;
//        }
//    }

}



int main()
{
    int nodes, edges;
    cin >> nodes >> edges;
    inputGraph(nodes,edges);
    //printGraph(nodes);
    bfs(1,nodes,edges, 5);


    return 0;
}

/*
5
6
1
2
1
4
2
4
2
3
3
5
4
5

*/
